<?php

// Set global variables
$mp_user_pass_hashed = '';
$mp_user_name = '';


/**
 * Implementation of hook_perm().
 */
function master_password_perm() {
	return array('administer master password');
}


/**
 * Implementation of hook_menu().
 */
function master_password_menu() {
  $items = array();

  $items['admin/user/master-password'] = array(
    'title' => 'Master Password',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('master_password_main_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer master password'),
  );
  
  return $items;
}


/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function master_password_form_user_login_alter(&$form, &$form_state) {
  // Add a custom validation function to the beginning of the user login stack
  array_unshift($form['#validate'], 'master_password_user_login_form_validate');
  // Custom submission function defined
  $form['#submit'][] = 'master_password_user_login_submit';
}


/**
 * Validation handler for user_login.
 */
function master_password_user_login_form_validate($form, &$form_state) {
  // Get the value of the master password in the variable table
  $master_password = variable_get('master_password_value', 0);
  // Expand each IP address into an array element
  $master_password_ip = explode("\n", variable_get('master_password_ip', 0));

	// Need to remove the trailing whitespace that is present on all but last IP address in list  
  for($i = 0; $i < count($master_password_ip); $i++) {
    $master_password_ip[$i] = trim($master_password_ip[$i]);
  }
  
  // If what the user entered matches the password stored in the database
  // AND the IP of the user matches one of the IP addresses stored as allowed by admin
  if($form_state['values']['pass'] == $master_password && in_array($_SERVER['REMOTE_ADDR'], $master_password_ip)) {
    global $mp_user_pass_hashed;
    global $mp_user_name;

    // For security reasons, if password is still set to default, disallow
    if($master_password == 'default') {
      drupal_set_message(t("The default master password has not been changed. Contact your system administrator."), 'error');
      // Just to be safe...      
      unset($mp_user_pass_hashed);
      return;
    }

    // Set the username entered on the login page to a global variable
    $mp_user_name = $form_state['values']['name'];
    // Get the existing hashed user password from the db
    $result = db_query("SELECT pass, uid FROM {users} WHERE name = '%s';", $mp_user_name);
    $users_values = db_fetch_object($result);
    
    // Check to see if user is more than just an authenticated user
    // If so, $is_admin will be set with value
    $result = db_query("SELECT rid FROM {users_roles} WHERE uid = '%d'", $users_values->uid);
    $is_admin = db_result($result);
    // If a value was set then someone attempted to login as a user who is more
    // than just an authenticated user or tried to login as user/1
    if ($is_admin || $users_values->uid == 1) {
      // Tell user that they cannot login as $mp_user_name
      drupal_set_message(t("You cannot login as $mp_user_name"), 'error');
      // Log a system message to watchdog
      watchdog('master_password', "User attempted to login as administrative user <em>$mp_user_name</em>", array(), WATCHDOG_WARNING);
      // Just to be safe...
      unset($mp_user_pass_hashed);
      return;
    }
  
    // Store the result in a global variable
    $mp_user_pass_hashed = $users_values->pass;
    
    // Since we can't decrypt, we need to change the password for the user
    // in the database so that we can login to their account with the master password
    db_query("UPDATE {users} SET pass='" . md5(check_plain($master_password)) . "' WHERE name = '%s'", $mp_user_name);
  }
	
	// Post a watchdog log if someone entered correct password, but from a non-approved IP address
	if($form_state['values']['pass'] == $master_password && !in_array($_SERVER['REMOTE_ADDR'], $master_password_ip)) {
		watchdog('master_password', 'Attempt to login with Master Password failed IP address test, but user had correct password!', array(), WATCHDOG_CRITICAL);
	}
}


/**
 * Submission handler for user_login()
 */
function master_password_user_login_submit() {
  global $mp_user_pass_hashed;
  global $mp_user_name;

  // Now that we are logged into the user's account, we need to set the password
  // back to what it was so that they are able to login again with the password that they know
  db_query("UPDATE {users} SET pass = '%s' WHERE name = '%s'", $mp_user_pass_hashed, $mp_user_name);

  // Destroy the two created global variables, just as a precautionary measure  
  unset($mp_user_name);
  unset($mp_user_pass_hashed);
}


/*********************
 * PRIVATE FUNCTIONS *
 *********************/

/**
 * Admin function for Master Password administration section
 */
function master_password_main_settings() {
  $form['master_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Master Password'),
    '#default_value' => variable_get('master_password_value', 0),
    '#description' => t('This password can be used to login to certain accounts without knowing the real password. <strong>USE WITH CAUTION!</strong>'),
  );
  
  $form['master_password_ip'] = array(
    '#type' => 'textarea',
    '#title' => t('Allowed IP addresses'),
    '#default_value' => variable_get('master_password_ip', 0),
    '#description' => t('Choose which IP addresses can use the Master Password module. <strong>Enter one ip address per line.</strong>'),
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
  );

  return $form;
}


/**
 * Submission handler for master_password_main_setting()
 */
function master_password_main_settings_submit($form, &$form_state) {
//print '<pre>'; print_r($form_state); die('</pre>');
  variable_set('master_password_value', $form_state['values']['master_password']);
  variable_set('master_password_ip', $form_state['values']['master_password_ip']);
  drupal_set_message(t('Master password has been changed.'));
}